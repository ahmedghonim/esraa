// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String    @id @default(cuid())
  fullname  String
  password  String
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  account   Account[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Product {
  id              Int               @id @default(autoincrement())
  name            String
  description     String
  images          String[]
  thumbnail       String
  stoke           Int               @default(1)
  price           Float
  slug            String
  colors          Color[]           @relation("ProductColors")
  categories      Category[]        @relation("ProductCategories")
  sizes           Size[]            @relation("ProductSizes")
  collection      Collection?       @relation(fields: [collectionId], references: [id])
  collectionId    Int?
  ProductColor    ProductColor[]
  ProductCategory ProductCategory[]
  ProductSize     ProductSize[]
  OrderProduct    OrderProduct[]

  relatedProducts Product[] @relation("RelatedProducts")
  parentProducts  Product[] @relation("RelatedProducts")

  @@index([name])
}

model Color {
  id           Int            @id @default(autoincrement())
  name         String
  hexCode      String
  products     Product[]      @relation("ProductColors")
  ProductColor ProductColor[]

  @@unique([name])
}

model Category {
  id              Int               @id @default(autoincrement())
  name            String
  image           String
  products        Product[]         @relation("ProductCategories")
  ProductCategory ProductCategory[]

  @@unique([name])
}

model Size {
  id          Int           @id @default(autoincrement())
  name        String
  products    Product[]     @relation("ProductSizes")
  ProductSize ProductSize[]

  @@unique([name])
}

model Collection {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  @@unique([name])
}

// Create a junction table for many-to-many relationships
model ProductColor {
  productId Int
  colorId   Int

  product Product @relation(fields: [productId], references: [id])
  color   Color   @relation(fields: [colorId], references: [id])

  @@id([productId, colorId])
}

model ProductCategory {
  productId  Int
  categoryId Int

  product  Product  @relation(fields: [productId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model ProductSize {
  productId Int
  sizeId    Int

  product Product @relation(fields: [productId], references: [id])
  size    Size    @relation(fields: [sizeId], references: [id])

  @@id([productId, sizeId])
}

model Customer {
  id     Int     @id @default(autoincrement())
  name   String
  phone  String  @unique
  email  String? @unique
  orders Order[]
}

model Order {
  id         Int            @id @default(autoincrement())
  orderDate  DateTime       @default(now())
  customerId Int
  customer   Customer       @relation(fields: [customerId], references: [id])
  products   OrderProduct[]
}

model OrderProduct {
  orderId   Int
  productId Int
  quantity  Int @default(1)

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

model WhatTheSay {
  id        Int      @id @default(autoincrement())
  name      String
  message   String
  image     String
  hidden    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SaleSlider {
  id          Int      @id @default(autoincrement())
  description String
  image       String
  hidden      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
