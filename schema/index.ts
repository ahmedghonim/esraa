import { z } from "zod";

// Define the nested schemas for colors, categories, sizes, and collection
const ColorSchema = z.object({
  id: z.number().optional(),
  name: z.string().min(1),
  hexCode: z.string().min(1),
});

const CategorySchema = z.object({
  id: z.number().optional(),
  image: z.string(),
  name: z.string().min(1),
  topCategory: z.boolean().optional(),
});

const ShippingSchema = z.object({
  id: z.number().optional(),
  city: z.string().min(1),
  price: z.number().or(z.string().transform(Number)),
});

const SizeSchema = z.object({
  id: z.number().optional(),
  name: z.string().min(1),
});

const CollectionSchema = z.object({
  id: z.number().optional(),
  name: z.string().min(1),
});

// Define the ProductVariant schema
const ProductVariantSchema = z.object({
  color: z.string(), // Color is optional
  size: z.string(), // Size is optional
  stock: z.number().or(z.string().transform(Number)),
});

// Define the main Product schema
const ProductSchema = z.object({
  id: z.number().optional(),
  newArrival: z.boolean().optional(),
  price: z.union([z.number(), z.string().transform(Number)]),
  newPrice: z.union([z.number(), z.string().transform(Number)]).optional(),
  name: z.string().min(1),
  description: z.string().min(1),
  images: z.array(z.string().url()), // Ensuring that each image URL is valid
  thumbnail: z.string().url(), // Ensuring that the thumbnail URL is valid
  categories: z.array(z.number()), // Array of category IDs
  collectionId: z.number().optional(),
  relatedProducts: z.array(z.number()).optional(), // Array of related product IDs
});

// Define schema for OrderProduct
const OrderProductSchema = z.object({
  productId: z.number(),
  quantity: z.number(),
  color: z.string(), // Color is optional
  size: z.string(), // Size is optional
  colorId: z.number(),
  sizeId: z.number(),
});

// Define schema for Order
const OrderSchema = z.object({
  id: z.number().optional(), // Optional because it's generated by the database
  customerId: z.number(),
  orderDate: z.date().optional(), // Optional because it defaults to now in the database
  products: z.array(OrderProductSchema), // Array of OrderProduct
});

// Define the Customer schema
const CustomerSchema = z.object({
  id: z.number().optional(),
  name: z.string().min(1),
  phone: z
    .string()
    .min(1)
    .regex(/^\+?[0-9]\d{1,14}$/), // Assuming E.164 phone format
  email: z.string().email().optional(),
  city: z.string().min(1),
  country: z.string().min(1),
  floor_no: z.string().min(1),
  build_no: z.string().min(1),
  details: z.string().optional(),
});

const SaleSliderSchema = z.object({
  id: z.number().int().optional(),
  hidden: z.boolean().optional(),
  description: z.string().min(1),
  image: z.string().url(),
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});

const WhatTheSaySchema = z.object({
  id: z.number().int().optional(),
  hidden: z.boolean().optional(),
  name: z.string().min(1),
  message: z.string().min(1),
  image: z.string().url(),
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});

export const UserLoginSchema = z.object({
  email: z.string().email({ message: "You did not enter a valid email" }),
  password: z
    .string()
    .min(8, { message: "Your password must be atleast 8 characters long" })
    .max(64, {
      message: "Your password can not be longer then 64 characters long",
    }),
});

const SignupSchema = z.object({
  fullname: z.string().min(1),
  email: z.string().email(),
  password: z
    .string()
    .min(8, { message: "Your password must be atleast 8 characters long" })
    .max(64, {
      message: "Your password can not be longer then 64 characters long",
    })
    .refine(
      (value) => /^[a-zA-Z0-9_.-]*$/.test(value ?? ""),
      "password should contain only alphabets and numbers"
    ),
  confirmPassword: z.string(),
  otp: z.string(),
});

const HeroSectionSchema = z.object({
  id: z.number().optional(),
  title: z.string().min(1),
  description: z.string().min(1),
  thumbnail: z.string().url().optional(),
  products: z.array(z.number()),
  mainProduct: z.number(),
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});

const ContactSchema = z.object({
  id: z.number().optional(),
  name: z.string(),
  phone: z
    .string()
    .regex(
      /^([+]?[\s0-9]+)?(\d{3}|[(]?[0-9]+[)])?([-]?[\s]?[0-9])+$/,
      "Invalid Number!"
    ),
  message: z.string(),
  isRead: z.boolean().optional(),
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});

const OurInfoSchema = z.object({
  id: z.number().optional(),
  phone: z.string(),
  email: z.string(),
  whatsApp: z.string(),
  facebook: z.string().optional(),
  instagram: z.string().optional(),
  x: z.string().optional(),
  tiktok: z.string().optional(),
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});

type Contact = z.infer<typeof ContactSchema>;

type OurInfo = z.infer<typeof OurInfoSchema>;

type HeroSection = z.infer<typeof HeroSectionSchema>;

type Signup = z.infer<typeof SignupSchema>;

type UserLogin = z.infer<typeof UserLoginSchema>;

type WhatTheSay = z.infer<typeof WhatTheSaySchema>;

type SaleSlider = z.infer<typeof SaleSliderSchema>;

type Product = z.infer<typeof ProductSchema>;

type Color = z.infer<typeof ColorSchema>;

type Category = z.infer<typeof CategorySchema>;

type Size = z.infer<typeof SizeSchema>;

type Collection = z.infer<typeof CollectionSchema>;

type OrderProduct = z.infer<typeof OrderProductSchema>;

type Order = z.infer<typeof OrderSchema>;

type CustomerType = z.infer<typeof CustomerSchema>;
type ProductVariant = z.infer<typeof ProductVariantSchema>;

type Shipping = z.infer<typeof ShippingSchema>;
export {
  CategorySchema,
  CollectionSchema,
  ColorSchema,
  ContactSchema,
  CustomerSchema,
  HeroSectionSchema,
  OrderProductSchema,
  OrderSchema,
  OurInfoSchema,
  ProductSchema,
  SaleSliderSchema,
  ShippingSchema,
  SignupSchema,
  SizeSchema,
  WhatTheSaySchema,
  type Category,
  type Collection,
  type Color,
  type Contact,
  type CustomerType,
  type HeroSection,
  type Order,
  type OrderProduct,
  type OurInfo,
  type Product,
  type ProductVariant,
  type SaleSlider,
  type Shipping,
  type Signup,
  type Size,
  type UserLogin,
  type WhatTheSay,
};
